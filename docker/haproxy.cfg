# Copyright (C) 2024 In-Game Event, A Red Flag Syndicate LLC
#
# This program is free software: you can redistribute it and/or modify it under the terms of the Server Side Public License, version 1, as published by MongoDB, Inc., with the following additional terms:
#
# - Any use of this software in a commercial capacity requires a commercial license agreement with In-Game Event, A Red Flag Syndicate LLC. Contact licence_request@igearfs.com for details.
#
# - If you choose not to obtain a commercial license, you must comply with the SSPL terms, which include making publicly available the source code for all programs, tooling, and infrastructure used to operate this software as a service.
#
# For licensing inquiries, contact: licence_request@igearfs.com


global
    log stdout format raw local0  # Log to stdout for Docker compatibility

defaults
    log global  # Use global logging settings
    timeout connect 5000ms  # Timeout for connecting to backends
    timeout client 50000ms  # Timeout for client connections
    timeout server 50000ms  # Timeout for server connections

# Redis Load Balancing
frontend redis_front
    bind *:6379  # Listen on port 6379 for Redis connections
    mode tcp
    default_backend redis_back  # Use the redis_back backend
    option tcplog  # Enable TCP logging for the Redis frontend

backend redis_back
    balance roundrobin  # Distribute requests evenly between servers
    mode tcp
    option tcp-check  # Enable TCP health checks
    server redis_1 nlm_redis_1:6379 check  # Internal Redis server 1
    server redis_2 nlm_redis_2:6379 check  # Internal Redis server 2

# Kafka Load Balancing
frontend kafka_front
    bind *:9092  # Listen on port 9092 for Kafka connections
    mode tcp
    option tcplog  # Enable TCP logging for the Kafka frontend
    default_backend kafka_back  # Use the kafka_back backend

# stats for prometheus
frontend prometheus
  bind :8405
  mode http
  http-request use-service prometheus-exporter
  no log

#listen stats
#    bind *:1936
#    stats enable
#    stats uri /
#    stats refresh 10s

backend kafka_back
    mode tcp
    balance roundrobin  # Distribute requests evenly between servers
    option tcp-check  # Enable TCP health checks
    server kafka1 nlm_kafka1:9092 check  # Internal Kafka broker 1
    server kafka2 nlm_kafka2:9093 check  # Internal Kafka broker 2
    server kafka3 nlm_kafka3:9094 check  # Internal Kafka broker 3

